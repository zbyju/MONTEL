---
import type { ColorName } from "../../types/colors.types";
import { colorWeighted } from "../../utils/colors";
import Image from "../elements/Image.astro";
import Link from "../elements/Link.astro";

interface Props {
  align: "left" | "right";
  heading: string;
  color: ColorName;
  image?: {
    src: string;
    alt: string;
  };
  dark?: boolean;
  className?: string;
}
const { align, heading, color, dark = false, className, image } = Astro.props;

const primaryColor = dark
  ? colorWeighted(color, 900)
  : colorWeighted(color, 100);
const secondaryColor = dark
  ? colorWeighted(color, 100)
  : colorWeighted(color, 900);
const items = align === "right" ? "items-end" : "items-start";
const self = align === "right" ? "self-end" : "self-start";
const sort = align === "right" ? "flex-row-reverse" : "flex-row";
const textAlign = align === "right" ? "text-right" : "text-left";
---

<div class={`w-screen bg-${primaryColor} pb-7 ${className}`}>
  <div class={`py-16 px-3 md:px-10 text-${secondaryColor} flex ${sort} gap-10`}>
    <div
      class={`flex-grow flex flex-col items-center lg:w-3/4 w-full md:${items} text-center md:${textAlign}`}
    >
      <h3 class="text-5xl md:text-6xl font-bold mb-3">
        {heading}
      </h3>
      {
        image && (
          <Image
            src={image.src}
            alt={image.alt}
            className="self-center my-5 md:hidden"
          />
        )
      }
      <div class="mb-3 text-md">
        <slot />
      </div>
      <!-- <Link -->
      <!--   bg={color} -->
      <!--   link={{ -->
      <!--     href: "/babybox", -->
      <!--     text: "VÃ­ce", -->
      <!--     className: `self-center md:${self}`, -->
      <!--   }} -->
      <!-- /> -->
    </div>
    {
      image && (
        <Image
          src={image.src}
          alt={image.alt}
          className="self-center hidden md:block"
        />
      )
    }
  </div>
</div>
